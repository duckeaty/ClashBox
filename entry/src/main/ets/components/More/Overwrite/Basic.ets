import { BreakpointState } from "../../../common/breakpointsystem"
import { ListOverwriteBasicData,  moreData } from "../../../common/Constants"
import { hilog } from "@kit.PerformanceAnalysisKit"
import OverwriteTop from "./OverwriteTopBuilder"

@Component
struct Basic {
  /* 主题色 */
  @Consume('icon_emphasize') icon_emphasize: ResourceColor
  //一级图标色，黑色
  @State icon_primary: ResourceColor = $r('sys.color.icon_primary')

  @Consume('NavPathStack') pageInfos: NavPathStack
  @StorageProp('isLandscapePhone')  private isLandscapePhone: boolean = false
  @Consume('breakPointStatemorePageMargin') morePageMargin: BreakpointState<number>
  @State overwriteBasicList: moreData[] = ListOverwriteBasicData()
  @Consume('breakPointStatemorePagelistBottom') listBottom: BreakpointState<number>
  // 列表高度
  @Consume('breakPointStateListHeight') listHeight: BreakpointState<number>
  // 平板竖屏判断
  @StorageProp('istabletVertical')  private istabletVertical: boolean = false

  handleCheck(index: number) {
    // 跳转
    let itemData = this.overwriteBasicList[index]
    this.pageInfos.pushPathByName(itemData.name, false)
  }
  // 开关处理
  handleToggle(index: number) {
    switch (index) {
      case 6:
        // IPv6状态切换
        hilog.info(0xFF00, "BasictestTag", "IPv6")

        break
      case 7:
        // 统一延迟实现
        hilog.info(0xFF00, "BasictestTag", "统一延迟")

        break
      case 8:
        // TCP并发切换
        hilog.info(0xFF00, "BasictestTag", "TCP并发")

        break
      case 9:
        // 外部控制实现
        hilog.info(0xFF00, "BasictestTag", "外部控制")

        break
    }

  }

  build() {
    NavDestination() {
      OverwriteTop({
        title: $r('app.string.Basic'),
        subtitle: ''
      })

      List() {
        ForEach(this.overwriteBasicList, (item: moreData, index: number) => {
          ListItem() {
            Row() {
              Row() {
                SymbolGlyph(item.icons)
                  .fontSize(24)
                  .margin({left: 12})
                  .fontColor([this.icon_primary])
                Column() {
                  Text(item.title)
                    .fontWeight(FontWeight.Medium)
                    .fontSize(16)
                  if(index === 7 || index === 9 ) {
                    Text(item.subtitle)
                      .fontWeight(FontWeight.Normal)
                      .margin({ top: 2 })
                      .fontSize(14)
                  }
                }
                .alignItems(HorizontalAlign.Start)
                .margin({ left: 12 })
                Blank()
                if (item.sign === 0 ) {
                  // 展开型
                  Text(item.subtitle)
                    .fontWeight(FontWeight.Normal)
                    .margin({top: 2 })
                    .fontSize(14)
                  SymbolGlyph($r('sys.symbol.arrowtriangle_down_fill'))
                    .fontSize(14)
                    .margin({left: 7, right: 20})
                    .fontColor([this.icon_primary])
                } else if (item.sign === 1) {
                  // 跳转型
                  if(index != 5) {
                    Text(item.subtitle)
                      .fontWeight(FontWeight.Normal)
                      .margin({right: 4 })
                      .fontSize(14)
                  }
                  SymbolGlyph($r('sys.symbol.chevron_right'))
                    .fontSize(28)
                    .margin({right: 12})
                    .fontColor([this.icon_primary])
                } else if (item.sign === 2 ) {
                  // 开关型
                  Toggle({ type: ToggleType.Switch, isOn: item.isCheck })
                    .selectedColor(this.icon_emphasize)
                    .margin({right: 12})
                    .onChange((isOn: boolean) => {
                      if(isOn) {
                        this.handleToggle(index)
                      }
                    })
                }
              }
              .width('94%')
              .height(53)
              .borderRadius(20)
              .backgroundColor($r('app.color.container_background'))
            }
            .onClick(() => {
              if(item.sign === 1) {
                this.handleCheck(index)
              }
            })
          }
          .margin({bottom: this.listBottom.value })

        })

      }
      .edgeEffect(EdgeEffect.Spring, { alwaysEnabled: true })
      .width('100%')
      .height(this.isLandscapePhone ? 275 : (this.istabletVertical ? 900 : this.listHeight.value))
      .margin({ top: 10, left: this.morePageMargin.value, right: this.morePageMargin.value })
      .borderRadius(18)
      .alignListItem(ListItemAlign.Center)

    }
    .hideTitleBar(true)
    .backgroundColor($r('app.color.background'))
    .onBackPressed(() => {
      this.pageInfos.clear();
      return true;
    })
  }
}
export default Basic